/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "startStream(account,account,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "startWithExistingId(uint64,account,account,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "StreamData",
          "elements": [
            [
              "streamRate",
              "uint64"
            ],
            [
              "startTime",
              "uint64"
            ],
            [
              "endTime",
              "uint64"
            ],
            [
              "withdrawnAmount",
              "uint64"
            ],
            [
              "recipient",
              "address"
            ],
            [
              "streamCreator",
              "address"
            ],
            [
              "balance",
              "uint64"
            ],
            [
              "isStreaming",
              "bool"
            ],
            [
              "last_withdrawal_time",
              "uint64"
            ]
          ]
        }
      }
    },
    "stopStream(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteStream(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getStreamEndTime(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuQXF1YUZsb3dWMi5jb250cmFjdC5BcXVhRmxvd1YyLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "streamCounter": {
          "type": "uint64",
          "key": "streamCounter"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "AquaFlowV2",
    "methods": [
      {
        "name": "startStream",
        "args": [
          {
            "type": "account",
            "name": "streamCreator"
          },
          {
            "type": "account",
            "name": "recipient"
          },
          {
            "type": "uint64",
            "name": "rate"
          },
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "startWithExistingId",
        "args": [
          {
            "type": "uint64",
            "name": "streamId"
          },
          {
            "type": "account",
            "name": "streamCreator"
          },
          {
            "type": "account",
            "name": "recipient"
          },
          {
            "type": "uint64",
            "name": "rate"
          },
          {
            "type": "uint64",
            "name": "amount"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "type": "uint64",
            "name": "streamId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getStreamData",
        "args": [
          {
            "type": "uint64",
            "name": "streamId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64)"
        }
      },
      {
        "name": "stopStream",
        "args": [
          {
            "type": "uint64",
            "name": "streamId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteStream",
        "args": [
          {
            "type": "uint64",
            "name": "streamId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getStreamEndTime",
        "args": [
          {
            "type": "uint64",
            "name": "streamId"
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the AquaFlowV2 smart contract.
 */
export type AquaFlowV2 = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'startStream(account,account,uint64,uint64)uint64' | 'startStream', {
      argsObj: {
        streamCreator: string | Uint8Array
        recipient: string | Uint8Array
        rate: bigint | number
        amount: bigint | number
      }
      argsTuple: [streamCreator: string | Uint8Array, recipient: string | Uint8Array, rate: bigint | number, amount: bigint | number]
      returns: bigint
    }>
    & Record<'startWithExistingId(uint64,account,account,uint64,uint64)void' | 'startWithExistingId', {
      argsObj: {
        streamId: bigint | number
        streamCreator: string | Uint8Array
        recipient: string | Uint8Array
        rate: bigint | number
        amount: bigint | number
      }
      argsTuple: [streamId: bigint | number, streamCreator: string | Uint8Array, recipient: string | Uint8Array, rate: bigint | number, amount: bigint | number]
      returns: void
    }>
    & Record<'withdraw(uint64)void' | 'withdraw', {
      argsObj: {
        streamId: bigint | number
      }
      argsTuple: [streamId: bigint | number]
      returns: void
    }>
    & Record<'getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64)' | 'getStreamData', {
      argsObj: {
        streamId: bigint | number
      }
      argsTuple: [streamId: bigint | number]
      returns: StreamData
    }>
    & Record<'stopStream(uint64)void' | 'stopStream', {
      argsObj: {
        streamId: bigint | number
      }
      argsTuple: [streamId: bigint | number]
      returns: void
    }>
    & Record<'deleteStream(uint64)void' | 'deleteStream', {
      argsObj: {
        streamId: bigint | number
      }
      argsTuple: [streamId: bigint | number]
      returns: void
    }>
    & Record<'getStreamEndTime(uint64)uint64' | 'getStreamEndTime', {
      argsObj: {
        streamId: bigint | number
      }
      argsTuple: [streamId: bigint | number]
      returns: bigint
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      streamCounter?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AquaFlowV2Sig = keyof AquaFlowV2['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AquaFlowV2Sig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a StreamData result as a struct
 */
export type StreamData = {
  streamRate: bigint
  startTime: bigint
  endTime: bigint
  withdrawnAmount: bigint
  recipient: string
  streamCreator: string
  balance: bigint
  isStreaming: boolean
  lastWithdrawalTime: bigint
}
/**
 * Converts the tuple representation of a StreamData to the struct representation
 */
export function StreamData([streamRate, startTime, endTime, withdrawnAmount, recipient, streamCreator, balance, isStreaming, lastWithdrawalTime]: [bigint, bigint, bigint, bigint, string, string, bigint, boolean, bigint] ) {
  return {
    streamRate,
    startTime,
    endTime,
    withdrawnAmount,
    recipient,
    streamCreator,
    balance,
    isStreaming,
    lastWithdrawalTime,
  }
}
/**
 * Maps a method signature from the AquaFlowV2 smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AquaFlowV2Sig> = AquaFlowV2['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AquaFlowV2 smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AquaFlowV2Sig> = AquaFlowV2['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AquaFlowV2CreateCalls = (typeof AquaFlowV2CallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AquaFlowV2CreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AquaFlowV2DeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AquaFlowV2CreateCalls) => AquaFlowV2CreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AquaFlowV2CallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AquaFlowV2 smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the startStream(account,account,uint64,uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static startStream(args: MethodArgs<'startStream(account,account,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'startStream(account,account,uint64,uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.streamCreator, args.recipient, args.rate, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the startWithExistingId(uint64,account,account,uint64,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static startWithExistingId(args: MethodArgs<'startWithExistingId(uint64,account,account,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'startWithExistingId(uint64,account,account,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.streamId, args.streamCreator, args.recipient, args.rate, args.amount],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static withdraw(args: MethodArgs<'withdraw(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'withdraw(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.streamId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64) ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getStreamData(args: MethodArgs<'getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.streamId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the stopStream(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static stopStream(args: MethodArgs<'stopStream(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'stopStream(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.streamId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteStream(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteStream(args: MethodArgs<'deleteStream(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteStream(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.streamId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getStreamEndTime(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getStreamEndTime(args: MethodArgs<'getStreamEndTime(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getStreamEndTime(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.streamId],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AquaFlowV2 smart contract
 */
export class AquaFlowV2Client {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AquaFlowV2Client`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AquaFlowV2['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AquaFlowV2 smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AquaFlowV2DeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AquaFlowV2CallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AquaFlowV2 smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AquaFlowV2 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the startStream(account,account,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public startStream(args: MethodArgs<'startStream(account,account,uint64,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AquaFlowV2CallFactory.startStream(args, params))
  }

  /**
   * Calls the startWithExistingId(uint64,account,account,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public startWithExistingId(args: MethodArgs<'startWithExistingId(uint64,account,account,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AquaFlowV2CallFactory.startWithExistingId(args, params))
  }

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public withdraw(args: MethodArgs<'withdraw(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AquaFlowV2CallFactory.withdraw(args, params))
  }

  /**
   * Calls the getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getStreamData(args: MethodArgs<'getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AquaFlowV2CallFactory.getStreamData(args, params), StreamData)
  }

  /**
   * Calls the stopStream(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public stopStream(args: MethodArgs<'stopStream(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AquaFlowV2CallFactory.stopStream(args, params))
  }

  /**
   * Calls the deleteStream(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteStream(args: MethodArgs<'deleteStream(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AquaFlowV2CallFactory.deleteStream(args, params))
  }

  /**
   * Calls the getStreamEndTime(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getStreamEndTime(args: MethodArgs<'getStreamEndTime(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AquaFlowV2CallFactory.getStreamEndTime(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<AquaFlowV2['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get streamCounter() {
        return AquaFlowV2Client.getIntegerState(state, 'streamCounter')
      },
    }
  }

  public compose(): AquaFlowV2Composer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      startStream(args: MethodArgs<'startStream(account,account,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.startStream(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      startWithExistingId(args: MethodArgs<'startWithExistingId(uint64,account,account,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.startWithExistingId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      withdraw(args: MethodArgs<'withdraw(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.withdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getStreamData(args: MethodArgs<'getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getStreamData(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(StreamData)
        return this
      },
      stopStream(args: MethodArgs<'stopStream(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.stopStream(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteStream(args: MethodArgs<'deleteStream(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteStream(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getStreamEndTime(args: MethodArgs<'getStreamEndTime(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getStreamEndTime(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AquaFlowV2Composer
  }
}
export type AquaFlowV2Composer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the startStream(account,account,uint64,uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startStream(args: MethodArgs<'startStream(account,account,uint64,uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AquaFlowV2Composer<[...TReturns, MethodReturn<'startStream(account,account,uint64,uint64)uint64'>]>

  /**
   * Calls the startWithExistingId(uint64,account,account,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startWithExistingId(args: MethodArgs<'startWithExistingId(uint64,account,account,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AquaFlowV2Composer<[...TReturns, MethodReturn<'startWithExistingId(uint64,account,account,uint64,uint64)void'>]>

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(args: MethodArgs<'withdraw(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AquaFlowV2Composer<[...TReturns, MethodReturn<'withdraw(uint64)void'>]>

  /**
   * Calls the getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStreamData(args: MethodArgs<'getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AquaFlowV2Composer<[...TReturns, MethodReturn<'getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64)'>]>

  /**
   * Calls the stopStream(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stopStream(args: MethodArgs<'stopStream(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AquaFlowV2Composer<[...TReturns, MethodReturn<'stopStream(uint64)void'>]>

  /**
   * Calls the deleteStream(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteStream(args: MethodArgs<'deleteStream(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AquaFlowV2Composer<[...TReturns, MethodReturn<'deleteStream(uint64)void'>]>

  /**
   * Calls the getStreamEndTime(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getStreamEndTime(args: MethodArgs<'getStreamEndTime(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AquaFlowV2Composer<[...TReturns, MethodReturn<'getStreamEndTime(uint64)uint64'>]>

  /**
   * Makes a clear_state call to an existing instance of the AquaFlowV2 smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): AquaFlowV2Composer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AquaFlowV2Composer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<AquaFlowV2ComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<AquaFlowV2ComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type AquaFlowV2ComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AquaFlowV2ComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
