{
    "hints": {
        "startStream(account,account,uint64,uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "startWithExistingId(uint64,account,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getStreamData(uint64)(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "StreamData",
                    "elements": [
                        [
                            "streamRate",
                            "uint64"
                        ],
                        [
                            "startTime",
                            "uint64"
                        ],
                        [
                            "endTime",
                            "uint64"
                        ],
                        [
                            "withdrawnAmount",
                            "uint64"
                        ],
                        [
                            "recipient",
                            "address"
                        ],
                        [
                            "streamCreator",
                            "address"
                        ],
                        [
                            "balance",
                            "uint64"
                        ],
                        [
                            "isStreaming",
                            "bool"
                        ],
                        [
                            "last_withdrawal_time",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "stopStream(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteStream(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getStreamEndTime(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgpzbWFydF9jb250cmFjdHMuQXF1YUZsb3dWMi5jb250cmFjdC5BcXVhRmxvd1YyLmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBpbnQgMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "streamCounter": {
                    "type": "uint64",
                    "key": "streamCounter"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AquaFlowV2",
        "methods": [
            {
                "name": "startStream",
                "args": [
                    {
                        "type": "account",
                        "name": "streamCreator"
                    },
                    {
                        "type": "account",
                        "name": "recipient"
                    },
                    {
                        "type": "uint64",
                        "name": "rate"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "startWithExistingId",
                "args": [
                    {
                        "type": "uint64",
                        "name": "streamId"
                    },
                    {
                        "type": "account",
                        "name": "recipient"
                    },
                    {
                        "type": "uint64",
                        "name": "rate"
                    },
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "streamId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getStreamData",
                "args": [
                    {
                        "type": "uint64",
                        "name": "streamId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,address,address,uint64,bool,uint64)"
                }
            },
            {
                "name": "stopStream",
                "args": [
                    {
                        "type": "uint64",
                        "name": "streamId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "deleteStream",
                "args": [
                    {
                        "type": "uint64",
                        "name": "streamId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "getStreamEndTime",
                "args": [
                    {
                        "type": "uint64",
                        "name": "streamId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}